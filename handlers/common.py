from blueprints.blueprint import bp
from vkbottle.bot import Message
import asyncio
from middlewares.registration import registered_chats
from vkbottle.dispatch.rules.base import PayloadRule
from random import choice, randint


tea_keys = [x.strip() for x in open("teakeys.txt", "r", encoding="utf-8").readlines()]
fortune_keys = [x.strip() for x in open("fortunekeys.txt", "r", encoding="utf-8").readlines()]
means_predict = [x.strip() for x in open("means.txt", "r", encoding="utf-8").readlines()]
figures = [x.strip() for x in open("figures.txt", "r", encoding="utf-8").readlines()]


@bp.on.message(text="–±–æ—Ç")
async def echo(m: Message):
    await bp.reply_msg(m, "–ù–∞ –º–µ—Å—Ç–µ")


@bp.on.message(text="—á–∞–π")
async def echo_tea(m: Message):
    await bp.reply_msg(m, "–¢–æ–ø")


@bp.on.private_message(PayloadRule({"button": 5}))
@bp.on.private_message(PayloadRule({"button": "5"}))
@bp.on.private_message(PayloadRule({"button": "help"}))
@bp.on.message(text=["—á–∞–π –ø–æ–º–æ–≥–∏", "—á–∞–π –∫–æ–º–∞–Ω–¥—ã", "–∫–æ–º–∞–Ω–¥—ã", "–ø–æ–º–æ—â—å", "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"])
async def send_help(m: Message):
    await bp.reply_msg(m, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", attachment="article-201071106_56737_9267e7523067b92cd6")


@bp.on.message(text="–∑–∞–≤–∞—Ä–∏—Ç—å —á–∞–π")
async def brew_tea(m: Message):
    await bp.reply_msg(m, "‚è∞ –ß–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã —Ç–≤–æ–π —á–∞–π –∑–∞–≤–∞—Ä–∏—Ç—Å—è")
    await asyncio.sleep(180)
    chat_db = registered_chats[m.chat_id]
    user_name = await chat_db.get_mention_user(m.from_id, 0)
    await bp.write_msg(m.peer_id, f"üçµ {user_name}, –≤–∞—à —á–∞–π –∑–∞–≤–∞—Ä–∏–ª—Å—è", disable_mentions=False)


@bp.on.private_message(PayloadRule({"button": 4}))
@bp.on.private_message(PayloadRule({"button": "4"}))
@bp.on.private_message(PayloadRule({"button": "get_aesthetic"}))
@bp.on.message(text=["—á–∞–π —ç—Å—Ç–µ—Ç–∏–∫–∞", "–ø–æ–ª—É—á–∏—Ç—å —ç—Å—Ç–µ—Ç–∏–∫—É", "—ç—Å—Ç–µ—Ç–∏–∫–∞", "—á–∞–π–Ω–∞—è —ç—Å—Ç–µ—Ç–∏–∫–∞"])
async def aesthetic(m: Message):
    await bp.reply_msg(m, "–í–æ—Ç —Ç–≤–æ—è —ç—Å—Ç–µ—Ç–∏–∫–∞:", attachment=choice(tea_keys))


@bp.on.private_message(PayloadRule({"button": "get_prediction"}))
@bp.on.private_message(PayloadRule({"button": 3}))
@bp.on.private_message(PayloadRule({"button": "3"}))
@bp.on.message(text=["–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "—á–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", "–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])
async def prediction(m: Message):
    number = randint(0, len(fortune_keys)-1)
    await bp.reply_msg(m, f"–í–∞–º –≤—ã–ø–∞–ª–∞ —Ñ–∏–≥—É—Ä–∞: {figures[number]}\n"
                          f"–ó–Ω–∞—á–µ–Ω–∏–µ: {means_predict[number]}", attachment=fortune_keys[number])


@bp.on.private_message(PayloadRule({"button": "glue"}))
@bp.on.private_message(PayloadRule({"button": "2"}))
@bp.on.private_message(PayloadRule({"button": 2}))
async def need_glue(m: Message):
    await bp.reply_msg(m, "–ö–∏–¥–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
